{
  "stats": {
    "suites": 1,
    "tests": 17,
    "passes": 12,
    "pending": 0,
    "failures": 5,
    "start": "2025-09-28T14:07:25.435Z",
    "end": "2025-09-28T14:07:25.559Z",
    "duration": 124,
    "testsRegistered": 17,
    "passPercent": 70.58823529411765,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d06985fb-7899-4c0d-b993-efb1ef4d63a8",
      "title": "",
      "fullFile": "D:\\supertest automation\\tests\\auth.test.js",
      "file": "\\tests\\auth.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
          "title": "Mock User Auth API",
          "fullFile": "D:\\supertest automation\\tests\\auth.test.js",
          "file": "\\tests\\auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Mock User Auth API\"",
              "fullTitle": "Mock User Auth API \"before each\" hook in \"Mock User Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Optional: reset users.json",
              "err": {},
              "uuid": "d713df9e-1328-4d96-9499-87b38c977e1a",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a user successfully",
              "fullTitle": "Mock User Auth API should register a user successfully",
              "timedOut": false,
              "duration": 48,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// const uniqueEmail = `user${Date.now()}@test.com`;\n const res = await request(API)\n   .post('/api/v1/users')\n   .send({ name: 'user', email: 'user@gmail.com', password: 'user123' });\n expect(res.status).to.equal(200);\n expect(res.body).to.have.property('message', 'User registered with success');\n expect(res.body).to.have.property('token');\n token = res.body.token;",
              "err": {
                "message": "AssertionError: expected { Object (message) } to have property 'token'",
                "estack": "AssertionError: expected { Object (message) } to have property 'token'\n    at Context.<anonymous> (tests\\auth.test.js:20:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "859c9a8e-db14-4ec8-b8ef-62f629e8199b",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login a user and return a token",
              "fullTitle": "Mock User Auth API should login a user and return a token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  \n  .post(\"/api/v1/auth\")\n  .send({ email: \"user@gmail.com\", password: \"user123\" });\nexpect(res.status).to.equal(200);// or 201 if your API uses it\nexpect(res.body).to.have.property(\"token\");\nexpect(res.body.token).to.be.a(\"string\");\n// Optional: save token for future authenticated requests\ntoken = res.body.token;",
              "err": {},
              "uuid": "70a7fc57-801b-4c53-aec4-1af829082f75",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user details",
              "fullTitle": "Mock User Auth API should get user details",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .get('/api/v1/users')\n  .set('Authorization', token); // make sure you include \"Bearer \"\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('id');\nexpect(res.body).to.have.property('name', 'user');\nexpect(res.body).to.have.property('email', 'user@gmail.com');\nexpect(res.body).to.have.property('password', 'user123');\nexpect(res.body).to.have.property('imageUrl');",
              "err": {},
              "uuid": "902ab2ab-cd9d-457c-9f1f-194f416ad498",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user details",
              "fullTitle": "Mock User Auth API should update user details",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedData = {\n  name: \"newName\",\n  email: \"new_email@gmail.com\",\n  password: \"newpassword123\"\n};\nconst res = await request(API)\n  .patch('/api/v1/users')\n  .set('Authorization', token)\n  .send(updatedData);\nexpect(res.status).to.equal(200);\n//expect(res.body).to.have.property('data');\nexpect(res.body).to.have.property('message', 'User updated with success');\n// const user = res.body.data;\n// expect(user).to.have.property('id'); // id remains\n// expect(user).to.have.property('name', updatedData.name);\n// expect(user).to.have.property('email', updatedData.email);\n// expect(user).to.have.property('password', updatedData.password);\n// expect(user).to.have.property('imageUrl'); // unchanged",
              "err": {
                "message": "AssertionError: expected { data: { id: 26142, …(4) }, …(1) } to have property 'message' of 'User updated with success', but got 'User updated with success!'",
                "estack": "AssertionError: expected { data: { id: 26142, …(4) }, …(1) } to have property 'message' of 'User updated with success', but got 'User updated with success!'\n    at Context.<anonymous> (tests\\auth.test.js:63:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- User updated with success!\n+ User updated with success\n"
              },
              "uuid": "f0c4ab6f-ab12-4682-89f6-de0ad792a837",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login a user and return a token",
              "fullTitle": "Mock User Auth API should login a user and return a token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  \n  .post(\"/api/v1/auth\")\n  .send({ email: \"new_email@gmail.com\", password: \"newpassword123\" });\nexpect(res.status).to.equal(200);// or 201 if your API uses it\nexpect(res.body).to.have.property(\"token\");\nexpect(res.body.token).to.be.a(\"string\");\n// Optional: save token for future authenticated requests\ntoken = res.body.token;",
              "err": {},
              "uuid": "23662b7b-1aff-4d9d-9d6b-9f51508ca255",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the user successfully",
              "fullTitle": "Mock User Auth API should delete the user successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .delete('/api/v1/users')\n  .set('Authorization', token); // token from login\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'User deleted with success!');",
              "err": {},
              "uuid": "857d9193-1a3c-4e8d-9a4e-a7b4d18d575a",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete all users successfully",
              "fullTitle": "Mock User Auth API should delete all users successfully",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .delete('/api/v1/all-users')\n  .send({ key_admin: 'keyadmin123' }); // admin key in body\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Users deleted with success');",
              "err": {},
              "uuid": "3e7ae250-e9f9-40d8-9cb9-9240c700ce77",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register user with invalid body",
              "fullTitle": "Mock User Auth API should fail to register user with invalid body",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .post('/api/v1/users')\n  .send({ name: '', email: 'not-an-email' }); // missing password\nexpect(res.status).to.equal(401); // or whatever your API returns\nexpect(res.body).to.have.property('message');",
              "err": {
                "message": "AssertionError: expected 200 to equal 401",
                "estack": "AssertionError: expected 200 to equal 401\n    at Context.<anonymous> (tests\\auth.test.js:106:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- 200\n+ 401\n"
              },
              "uuid": "7ace1c04-164c-406b-8f40-1117bb31ceef",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register user without anything except name with space as a parameter",
              "fullTitle": "Mock User Auth API should fail to register user without anything except name with space as a parameter",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .post('/api/v1/users')\n  .send({ name:' '}); // missing password\nexpect(res.status).to.equal(401); // or whatever your API returns\nexpect(res.body).to.have.property('message');",
              "err": {
                "message": "AssertionError: expected 200 to equal 401",
                "estack": "AssertionError: expected 200 to equal 401\n    at Context.<anonymous> (tests\\auth.test.js:114:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- 200\n+ 401\n"
              },
              "uuid": "fd9db7cf-318a-4f26-a6f1-27411c544828",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login with email only ",
              "fullTitle": "Mock User Auth API should fail to login with email only ",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .post('/api/v1/auth')\n  .send({ email: 'not-an-email'});\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('message');",
              "err": {
                "message": "AssertionError: expected 200 to equal 401",
                "estack": "AssertionError: expected 200 to equal 401\n    at Context.<anonymous> (tests\\auth.test.js:122:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- 200\n+ 401\n"
              },
              "uuid": "edfb49db-6951-4bae-8fc7-6464b3ba0842",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login with invalid credentials",
              "fullTitle": "Mock User Auth API should fail to login with invalid credentials",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .post('/api/v1/auth')\n  .send({ email: 'wrong@gmail.com', password: 'wrongpass' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('message', 'Incorrect email or password');",
              "err": {},
              "uuid": "98e702ad-a9f4-4215-b2c0-38f37b212222",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login without inputs",
              "fullTitle": "Mock User Auth API should fail to login without inputs",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .post('/api/v1/auth')\n  .send({ email: ' ' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('message', 'Incorrect email or password');",
              "err": {},
              "uuid": "3a1b5e7f-9488-4ee3-a202-c0fddb823842",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get user details with invalid token",
              "fullTitle": "Mock User Auth API should fail to get user details with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .get('/api/v1/users')\n  .set('Authorization', 'Bearer invalidtoken');\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('message', 'Unauthorized');",
              "err": {},
              "uuid": "8d58af02-606e-4f12-a829-c9947564052d",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with invalid token",
              "fullTitle": "Mock User Auth API should fail to update user with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .patch('/api/v1/users')\n  .set('Authorization', 'Bearer invalidtoken')\n  .send({ name: 'test' });\nexpect(res.status).to.equal(403);\n // expect(res.body).to.have.property('message', 'Unauthorized');",
              "err": {},
              "uuid": "94f6f1bd-f488-44bc-9b37-526123128889",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with invalid body",
              "fullTitle": "Mock User Auth API should fail to update user with invalid body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .patch('/api/v1/users')\n  .set('Authorization', token)\n  .send({ email: '' }); // empty email\nexpect(res.status).to.equal(403); // or 400 depending on API\n // expect(res.body).to.have.property('message');",
              "err": {},
              "uuid": "51d4db65-b41f-458c-a508-7b805032db46",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete user with invalid token",
              "fullTitle": "Mock User Auth API should fail to delete user with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .delete('/api/v1/users')\n  .set('Authorization', 'Bearer invalidtoken');\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('message', 'Unauthorized to delete');",
              "err": {},
              "uuid": "690b88b7-a566-44e3-ac96-b964389adadd",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete all users with wrong admin key",
              "fullTitle": "Mock User Auth API should fail to delete all users with wrong admin key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(API)\n  .delete('/api/v1/all-users')\n  .send({ key_admin: 'wrongkey' });\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('message', 'Unauthorized access');",
              "err": {},
              "uuid": "9582d975-85d9-4ad3-8cd5-a5d04ae2875b",
              "parentUUID": "a8733349-edbe-40ed-abae-eb89cb0c85f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70a7fc57-801b-4c53-aec4-1af829082f75",
            "902ab2ab-cd9d-457c-9f1f-194f416ad498",
            "23662b7b-1aff-4d9d-9d6b-9f51508ca255",
            "857d9193-1a3c-4e8d-9a4e-a7b4d18d575a",
            "3e7ae250-e9f9-40d8-9cb9-9240c700ce77",
            "98e702ad-a9f4-4215-b2c0-38f37b212222",
            "3a1b5e7f-9488-4ee3-a202-c0fddb823842",
            "8d58af02-606e-4f12-a829-c9947564052d",
            "94f6f1bd-f488-44bc-9b37-526123128889",
            "51d4db65-b41f-458c-a508-7b805032db46",
            "690b88b7-a566-44e3-ac96-b964389adadd",
            "9582d975-85d9-4ad3-8cd5-a5d04ae2875b"
          ],
          "failures": [
            "859c9a8e-db14-4ec8-b8ef-62f629e8199b",
            "f0c4ab6f-ab12-4682-89f6-de0ad792a837",
            "7ace1c04-164c-406b-8f40-1117bb31ceef",
            "fd9db7cf-318a-4f26-a6f1-27411c544828",
            "edfb49db-6951-4bae-8fc7-6464b3ba0842"
          ],
          "pending": [],
          "skipped": [],
          "duration": 106,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "json": "true",
        "reportFilename": "report"
      },
      "version": "6.3.0"
    }
  }
}